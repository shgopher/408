(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{512:function(e,t,i){"use strict";i.r(t);var n=i(36),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"链表类"}},[e._v("链表类")]),e._v(" "),i("p",[e._v("基础知识：链表如何实现，如何遍历链表。链表可以保证头部尾部插入删除操作都是 O (1)，查找任意元素位置 O (N)")]),e._v(" "),i("p",[e._v("基础题目：")]),e._v(" "),i("ul",[i("li",[e._v("Leetcode 206。Reverse Linked List")]),e._v(" "),i("li",[e._v("Leetcode 876。Middle of the Linked List")])]),e._v(" "),i("p",[e._v("注意：快慢指针和链表反转几乎是所有链表类问题的基础，尤其是反转链表，代码很短，建议直接背熟。")]),e._v(" "),i("p",[e._v("进阶题目：")]),e._v(" "),i("ul",[i("li",[e._v("Leetcode 160。Intersection of Two Linked Lists")]),e._v(" "),i("li",[e._v("Leetcode 141。Linked List Cycle (Linked List Cycle II)")]),e._v(" "),i("li",[e._v("Leetcode 92。Reverse Linked List II")]),e._v(" "),i("li",[e._v("Leetcode 328。Odd Even Linked List")])])])}),[],!1,null,null,null);t.default=v.exports}}]);